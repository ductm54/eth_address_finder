name: Release

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:

env:
  CARGO_TERM_COLOR: always

jobs:
  build:
    name: Build ${{ matrix.target }}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - target: x86_64-unknown-linux-gnu
            os: ubuntu-latest
            name: eth_address_finder-linux-amd64
          - target: x86_64-pc-windows-msvc
            os: windows-latest
            name: eth_address_finder-windows-amd64.exe
          - target: x86_64-apple-darwin
            os: macos-latest
            name: eth_address_finder-macos-amd64
          - target: aarch64-apple-darwin
            os: macos-latest
            name: eth_address_finder-macos-arm64

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Install Rust
        uses: dtolnay/rust-toolchain@1.88.0
        with:
          targets: ${{ matrix.target }}
          components: rustfmt, clippy

      - name: Setup Cache
        uses: Swatinem/rust-cache@v2

      - name: Show Rust version
        run: |
          rustc --version
          cargo --version

      - name: Build Binary
        run: cargo build --verbose --locked --release --target ${{ matrix.target }}

      - name: Build Archive
        shell: bash
        run: |
          binary_name="address_finder"
          
          if [[ "${{ matrix.target }}" == *"windows"* ]]; then
            binary_name="${binary_name}.exe"
          fi
          
          if [[ "${{ matrix.os }}" == "windows-latest" ]]; then
            7z a "${{ matrix.name }}.zip" "./target/${{ matrix.target }}/release/${binary_name}"
            echo "ASSET=${{ matrix.name }}.zip" >> $GITHUB_ENV
          else
            tar -czf "${{ matrix.name }}.tar.gz" -C "./target/${{ matrix.target }}/release" "${binary_name}"
            echo "ASSET=${{ matrix.name }}.tar.gz" >> $GITHUB_ENV
          fi

      - name: Upload Archive
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.name }}
          path: ${{ env.ASSET }}

  release:
    name: Release
    runs-on: ubuntu-latest
    needs: build
    if: startsWith(github.ref, 'refs/tags/')
    
    steps:
      - name: Download Artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts

      - name: Create Release
        uses: softprops/action-gh-release@v1
        with:
          files: artifacts/**/*
          generate_release_notes: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}